<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="ttBundlePrepper.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>